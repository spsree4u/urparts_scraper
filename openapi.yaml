swagger: "2.0"
info:
  description: "This is API documentations for the Flash Card Application game."
  version: "1.0.0"
  title: "Urparts Scraper"
  contact:
    email: "spsree@gmail.com"
host: "localhost:3000"
# host: "Flash-Card-Application-v2.sreejithp2.repl.co"
basePath: "/api"
tags:
- name: "decks"
  description: "Operations about decks"
- name: "deck"
  description: "Operations about a single deck"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
# servers:
# - url: "http://192.168.1.4:3000"
paths:
  /decks:
    get:
      tags:
      - "decks"
      summary: "Get decks"
      description: ""
      # operationId: "decks"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Decks"
        "404":
          description: "Deck not found"
  /deck:
    post:
      tags:
      - "deck"
      summary: "Create deck"
      description: "This can only be done by the logged in user."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created deck object"
        required: true
        schema:
          properties:
            title:
              type: "string"
      responses:
        default:
          description: "successful operation"
  /deck/{deck_id}:
    get:
      tags:
      - "deck"
      summary: "Get user by user name"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "deck_id"
        in: "path"
        description: "The deck_id that needs to be fetched."
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Deck"
        "400":
          description: "Invalid deck_id supplied"
        "404":
          description: "Deck not found"
    put:
      tags:
      - "deck"
      summary: "Update deck"
      description: "This can only be done by the logged in user."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "deck_id"
        in: "path"
        description: "The deck_id that need to be updated."
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated deck_id object"
        required: true
        schema:
          properties:
            title:
              type: "string"
      responses:
        "400":
          description: "Invalid deck_id supplied"
        "404":
          description: "Deck not found"
    delete:
      tags:
      - "deck"
      summary: "Delete deck"
      description: "This can only be done by the logged in user."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "deck_id"
        in: "path"
        description: "The deck_id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid deck_id supplied"
        "404":
          description: "Deck not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Decks:
    type: "array"
    items:
      properties:
        dec_id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        last_review_date:
          type: "integer"
          format: "date-time"
        score:
          type: "integer"
          format: "int64"
    xml:
      name: "Decks"
  Deck:
    type: "object"
    properties:
      dec_id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      last_review_date:
        type: "integer"
        format: "date-time"
      score:
        type: "integer"
        format: "int64"
    xml:
      name: "Deck"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"